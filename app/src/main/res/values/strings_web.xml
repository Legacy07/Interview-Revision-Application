<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!--general web questions-->
    <string-array name="general_web_questions">
        <item>
            Can you explain the back-end process after clicking on a link to a web page?
        </item>
        <item>
            What Is Common Gateway Interface?
        </item>
        <item>
            Describe the key advantages of HTTP/2 as compared with HTTP 1.1.
        </item>
        <item>
            Explain the purpose of each of the HTTP request types when used with a RESTful web service.
        </item>
        <item>
            What is a "MIME type", what does it consist of, and what is it used for? Provide an example.
        </item>
        <item>
            Explain the basic structure of a MIME multipart message when used to transfer different content type parts. Provide a simple example.
        </item>
        <item>
            What is Long polling, how does it work, and why would you use it? Considering server and client resources, what is the main drawback of using long polling? Which HTML5 feature is the best alternative to long polling?
        </item>
        <item>
            Explain the difference between stateless and stateful protocols. Which type of protocol is HTTP? Explain your answer.
        </item>
        <item>
            How do you take into account SEO, maintainability, UX, performance, and security when you\'re building a web application?
        </item>
        <item>
            What is CORS?
        </item>
        <item>
            How can you reduce page loading time?
        </item>
        <item>
            What\'s the difference between Canvas and SVG?
        </item>
        <item>
            Explain what is DTD (Document Type Declaration)? Mention what is the difference between CDATA and PCDATA in DTD?
        </item>
        <item>
            Explain what is the difference between cookies and local storage?
        </item>

    </string-array>

    <!--general web answers-->
    <string-array name="general_web_answers">
        <!--Can you explain the back-end process after clicking on a link to a web page?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>Firstly, the browser checks the cache for a DNS record to find the corresponding IP address of the url.&nbsp;</p>
<p id="ee3b" class="graf graf--p graf-after--p">Though, in order to find the DNS record, the browser checks four caches.</p>
<p id="415e" class="graf graf--p graf-after--p">- First, it checks the browser cache. The browser maintains a repository of DNS records for a fixed duration for websites you have previously visited. So, it is the first place to run a DNS query.</p>
<p id="6a89" class="graf graf--p graf-after--p">- Second, the browser checks the OS cache. If it is not found in the browser cache, the browser would make a system call (i.e.&nbsp;<em class="markup--em markup--p-em">gethostname</em>&nbsp;on Windows) to your underlying computer OS to fetch the record since the OS also maintains a cache of DNS records.</p>
<p id="a73f" class="graf graf--p graf-after--p">- Third, it checks the router cache. If it&rsquo;s not found on your computer, the browser would communicate with the router that maintains its&rsquo; own cache of DNS records.</p>
<p id="edce" class="graf graf--p graf-after--p">- Fourth, it checks the ISP cache. If all steps fail, the browser would move on to the ISP. Your ISP maintains its&rsquo; own DNS server which includes a cache of DNS records which the browser would check with the last hope of finding your requested URL.</p>
<p class="graf graf--p graf-after--p">Then, if the requested URL is not in the cache, ISP&rsquo;s DNS server initiates a DNS query to find the IP address of the server that hosts.</p>
<p class="graf graf--p graf-after--p">Once the IP address is found, the browser will initiate a TCP connection with the server using the following order;&nbsp;</p>
<p id="4fd5" class="graf graf--p graf-after--p">1. Client machine sends a SYN packet to the server over the internet asking if it is open for new connections.</p>
<p id="e77a" class="graf graf--p graf-after--p">2. If the server has open ports that can accept and initiate new connections, it&rsquo;ll respond with an ACKnowledgment of the SYN packet using a SYN/ACK packet.</p>
<p id="92ec" class="graf graf--p graf-after--p">3. The client will receive the SYN/ACK packet from the server and will acknowledge it by sending an ACK packet.</p>
<p class="graf graf--p graf-after--p">Consequently, the browser sends an HTTP request to the web&nbsp;server then the server will handle the request and send back a response. Lastly, the server sends out an HTTP response which result the browser displaying the HTML content (for HTML responses which is the most&nbsp;common).</p>

            </pre></html>
            ]]>
        </item>
        <!--What Is Common Gateway Interface?-->
        <item>
            <![CDATA[<html><pre style="text-align:center">
              <p>The common gateway interface (CGI) is a standard way for a Web server to pass a Web user\'s request to an application program and to receive data back to forward to the user. When the user requests a Web page (for example, by clicking on a highlighted word or entering a Web site address), the server sends back the requested page. However, when a user fills out a form on a Web page and sends it in, it usually needs to be processed by an application program. The Web server typically passes the form information to a small application program that processes the data and may send back a confirmation message. This method or convention for passing data back and forth between the server and the application is called the common gateway interface (CGI). It is part of the Web\'s Hypertext Transfer Protocol.</p>
<p>If you are creating a Web site and want a CGI application to get control, you specify the name of the application in the uniform resource locator&nbsp;that you code in an HTML file. This URL can be specified as part of the FORMS tags if you are creating a form.</p>
<p>For example, you might code:</p>
<p><em>&lt;FORM METHOD=POST ACTION=http://www.mybiz.com/cgi-bin/formprog.pl&gt;</em></p>
<p>and the server at "<em>mybiz.com</em>" would pass control to the CGI application called "<em>formprog.pl</em>" to record the entered data and return a confirmation message. (The ".pl" indicates a program written in Perl but other languages could have been used.)</p>

            </pre></html>
            ]]>
        </item>
        <!--Describe the key advantages of HTTP/2 as compared with HTTP 1.1.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
        <p>HTTP/2 provides decreased latency to improve page load speed by supporting:</p>
<p>- Data compression of HTTP headers</p>
<p>- Server push technologies</p>
<p>- Loading of page elements in parallel over a single TCP connection</p>
<p>- Prioritization of requests</p>
<p>An important operational benefit of HTTP/2 is that it avoids the&nbsp;<a href="https://en.wikipedia.org/wiki/Head-of-line_blocking" rel="noopener noreferrer">head-of-line blocking</a>&nbsp;problem in HTTP 1.</p>

            </pre></html>
            ]]>

        </item>
        <!--Explain the purpose of each of the HTTP request types when used with a RESTful web service.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
       <p>The purpose of each of the HTTP request types when used with a RESTful web service is as follows:</p>
<p><strong>- GET:</strong>&nbsp;Retrieves data from the server (should only retrieve data and should have no other effect).</p>
<p><strong>- POST:</strong>&nbsp;Sends data to the server for a new entity. It is often used when uploading a file or submitting a completed web form.</p>
<p><strong>- PUT:</strong>&nbsp;Similar to POST, but used to replace an existing entity.</p>
<p><strong>- PATCH:</strong>&nbsp;Similar to PUT, but used to update only certain fields within an existing entity.</p>
<p><strong>- DELETE:</strong>&nbsp;Removes data from the server.</p>
<p><strong>- TRACE:</strong>&nbsp;Provides a means to test what a machine along the network path receives when a request is made. As such, it simply returns what was sent.</p>
<p><strong>OPTIONS:</strong>&nbsp;Allows a client to request information about the request methods supported by a service. The relevant response header is Allow and it simply lists the supported methods. (It can also be used to request information about the request methods supported for the server where the service resides by using a * wildcard in the URI.)</p>
<p><strong>- HEAD:</strong>&nbsp;Same as the GET method for a resource, but returns only the response headers (i.e., with no entity-body).</p>
<p><strong>- CONNECT:</strong>&nbsp;Primarily used to establish a network connection to a resource (usually via some proxy that can be requested to forward an HTTP request as TCP and maintain the connection). Once established, the response sends a 200 status code and a &ldquo;Connection Established&rdquo; message.</p>

            </pre></html>
            ]]>

        </item>
        <!--What is a "MIME type", what does it consist of, and what is it used for? Provide an example.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>MIME is an acronym for&nbsp;<strong>M</strong>ulti-purpose&nbsp;<strong>I</strong>nternet&nbsp;<strong>M</strong>ail&nbsp;<strong>E</strong>xtensions. It is used as a standard way of classifying file types over the Internet.</p>
<p>Web servers and browsers have a defined list of MIME types, which facilitates transfer of files of a known type, irrespective of operating system or browser.</p>
<p>A MIME type actually has two parts: a&nbsp;<em>type</em>&nbsp;and a&nbsp;<em>subtype</em>&nbsp;that are separated by a slash (/). For example, the MIME type for Microsoft Word files is&nbsp;<code><em>application</em>/<em>msword</em></code>&nbsp;(i.e., type is&nbsp;<em><code>application</code></em>&nbsp;and the subtype is&nbsp;<em><code>msword</code></em>).</p>

            </pre></html>
            ]]>

        </item>
        <!--Explain the basic structure of a MIME multipart message when used to transfer different content type parts. Provide a simple example.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>A simple example of a MIME multipart message is as follows:</p>
<p><em>MIME-Version: 1.0</em></p>
<p><br /><em>Content-Type: multipart/mixed; boundary=frontier </em><br /><em>This is a message with multiple parts in MIME format. </em><br /><em>--frontier </em><br /><em>Content-Type: text/plain </em><br /><br /><em>This is the body of the message. </em><br /><em>--frontier </em><br /><em>Content-Type: application/octet-stream </em><br /><em>Content-Transfer-Encoding: base64 </em><br /><br /><em>PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg </em><br /><em>Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg== </em><br /><em>--frontier--</em></p>
<p>Each MIME message starts with a message header. This header contains information about the message content and boundary. In this case&nbsp;<em><code>Content-Type: multipart/mixed; boundary=frontier</code>&nbsp;</em>means that message contains multiple parts where each part is of different content type and they are separated by&nbsp;<code>--<em>frontier</em></code>&nbsp;as their boundary.</p>
<p>Each part consists of its own content header (zero or more&nbsp;<code>Content-</code>&nbsp;header fields) and a body. Multipart content can be nested. The&nbsp;<em><code>content-transfer-encoding</code></em>&nbsp;of a multipart type must always be&nbsp;<em><code>7bit</code></em>,&nbsp;<em><code>8bit</code></em>, or&nbsp;<em><code>binary</code></em>&nbsp;to avoid the complications that would be posed by multiple levels of decoding. The multipart block as a whole does not have a charset; non-ASCII characters in the part headers are handled by the&nbsp;<code><em>Encoded</em>-<em>Word</em></code>&nbsp;system, and the part bodies can have charsets specified if appropriate for their&nbsp;<code><em>content</em>-<em>type</em></code>.</p>
            </pre></html>
            ]]>

        </item>
        <!--What is Long polling, how does it work, and why would you use it? Considering server and client resources, what is the main drawback of using long polling? Which HTML5 feature is the best alternative to long polling?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
<p>The HTTP protocol is based on a request/response pattern, which means that the server cannot&nbsp;<em>push</em>&nbsp;any data to the client (i.e., the server can only provide data to the client in response to a client request).&nbsp;<strong>Long polling</strong>&nbsp;is a web application development pattern used to&nbsp;<em>emulate</em>&nbsp;pushing data from server to client. When the long polling pattern is used, the client submits a request to the server and&nbsp;<em>the connection then remains active until the server is ready to send data to the client</em>. The connection is closed only after data is sent back to the client or connection timeout occurs. The client then creates a new request when the connection is closed, thus restarting the loop.</p>
<p>There are two important drawbacks that need to be considered when using long polling:</p>
<ol>
<li>
<p>Long polling requests are not different from any other HTTP request and web servers handle them the same way. This means that every long poll connection will reserve server resources, potentially maxing out the number of connections the server can handle. This can lead to HTTP connection timeouts.</p>
</li>
<li>
<p>Each web browser will limit the maximum number of connections web application can make. This means that your application load time and performance may be degraded.</p>
</li>
</ol>
<p>In HTML5, a useful alternative to long polling is using a&nbsp;<strong>WebSocket</strong>. A WebSocket is a protocol providing full-duplex communications channels over a single TCP connection. The WebSocket protocol makes possible more interaction between a browser and a web site, facilitating live content and eliminates the need for the long polling paradigm.</p>
<p>Another potential answer could be&nbsp;<strong>Server-sent DOM Events</strong>. Which is method of continuously sending data from a server to the browser, rather than repeatedly requesting it. However, this HTML5 feature is not supported by Microsoft Internet Explorer, thus making it less attractive solution.</p>

            </pre></html>
            ]]>

        </item>
        <!--Explain the difference between stateless and stateful protocols. Which type of protocol is HTTP? Explain your answer.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
              <p>A&nbsp;<strong>stateless</strong>&nbsp;communications protocol treats each request as an independent transaction. It therefore does not require the server to retain any session, identity, or status information spanning multiple requests from the same source. Similarly, the requestor can not rely on any such information being retained by the responder.</p>
<p>In contrast, a&nbsp;<strong>stateful</strong>&nbsp;communications protocol is one in which the responder maintains &ldquo;state&rdquo; information (session data, identity, status, etc.) across multiple requests from the same source.</p>
<p><strong>HTTP is a stateless protocol</strong>. HTTP does not require server to retain information or status about each user for the duration of multiple requests.</p>
<p>Some web servers implement states using different methods (using cookies, custom headers, hidden form fields etc.). However, in the very core of every web application everything relies on HTTP which is still a stateless protocol that is based on simple request/response paradigm.</p>

            </pre></html>
            ]]>
        </item>
        <!--  SEO, maintainability, UX, performance, and security when you’re building a web application?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
                <p>Explain how you prioritise your actions as per the requirements of the organisation. If your organisation handles vital data, then security will be your top priority. If it is a medium-sized online business, SEO and UX might be your top priority and so on.</p>

            </pre></html>
            ]]>

        </item>
        <!--What is CORS?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p><a href="http://www.w3.org/TR/cors/" rel="noopener noreferrer">Cross-origin resource sharing (CORS)</a>&nbsp;is a mechanism that allows many resources (e.g., fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated. It&rsquo;s a mechanism supported in HTML5 that manages&nbsp;<em><code>XMLHttpRequest</code></em>&nbsp;access to a domain different.</p>
<p>CORS adds new HTTP headers that provide access to permitted origin domains. For HTTP methods other than GET (or POST with certain MIME types), the specification mandates that browsers first use an HTTP OPTIONS request header to solicit a list of supported (and available) methods from the server. The actual request can then be submitted. Servers can also notify clients whether &ldquo;credentials&rdquo; (including Cookies and HTTP Authentication data) should be sent with requests.</p>

            </pre></html>
            ]]>

        </item>
        <!--How can you reduce page loading time?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>These are the following ways you can reduce web page loading time: reduce image size, remove unnecessary widgets, HTTP compression, placing CSS at the top and script referencing at the bottom or external files, reduce lookups, minimise redirects and caching.</p>

            </pre></html>
            ]]>

        </item>
        <!--What\'s the difference between Canvas and SVG?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>Canvas is an HTML5 element which can draw graphics on the fly with the help of JavaScript. SVG (Scalable Vector Graphics) is used to display vector-based graphics on the web.</p>

            </pre></html>
            ]]>

        </item>
        <!--Explain what is DTD (Document Type Declaration)? Mention what is the difference between CDATA and PCDATA in DTD?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>A DTD means Document Type Definition (DTD) which defines the structure, legal elements and attributes of an XML document.</p>
<p><strong>- PCDATA</strong>: A PCDATA is a Parsed Character Data. XML parsers usually parse all the text in an XML document.</p>
<p><strong>- CDATA</strong>: While CDATA is an Unparsed Character Data, the term CDATA is used about text data that should not be parsed by the XML parser.</p>

            </pre></html>
            ]]>

        </item>
        <!--Explain what is the difference between cookies and local storage?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
              <p><strong>Cookies</strong>:&nbsp;</p>
<p>- Data accessible both at client side and server side. The data is sent to the server-side with every cookie request.&nbsp;</p>
<p>- Storage capacity of cookies is 4095 bytes/cookie.</p>
<p>- Cookies have expiration and cookie data gets deleted after some time.&nbsp;</p>
<p><strong>Local Storage:</strong></p>
<p>- Only at the local browser side data is accessible.&nbsp; Server cannot use local storage until deliberately sent a request to the server via POST or GET.</p>
<p>- Storage capacity of local storage is 5MB per domain.</p>
<p>- There is no expiration and has to remove manually.</p>

            </pre></html>
            ]]>

        </item>
    </string-array>

    <string-array name="html_questions">

        <item>
            What are some of the key new features in HTML5?
        </item>
        <item>
            What are the differences between XHTML &amp; HTML5?
        </item>
        <item>
            Discuss the differences between an HTML specification and a browser\'s implementation thereof.
        </item>
        <item>
            Briefly describe the correct usage of the following HTML5 semantic elements: &lt;header&gt;, &lt;article&gt;, &lt;section&gt;, &lt;footer&gt;.
        </item>
        <item>
            Can a &lt;section&gt; contain &lt;article&gt; elements? Can an &lt;article&gt; contain &lt;section&gt; elements? Provide usage examples.
        </item>
        <item>
            Give a simple implementation of the &lt;video&gt; tag to embed a video stored at http://www.example.com/amazing_video.mp4. Give the video a width of 640 pixels by 360 pixels. Provide the user with controls.
        </item>
        <item>
            What is HTML5 Web Storage? Explain localStorage and sessionStorage.
        </item>
        <item>
            What\'s one main result if you do not specify a doctype in an HTML page?
        </item>
        <item>
            What\'s the difference between the &lt;svg&gt; and &lt;canvas&gt; elements?
        </item>
        <item>
            What is a class? What is an ID?
        </item>
        <item>
            What\'s the difference between a block-level element and an inline element?
        </item>
        <item>
            How do you apply CSS styles to a web page?
        </item>
        <item>
            How do you apply JavaScript to a web page?
        </item>
        <item>
            What is Web Forms 2.0?
        </item>
        <item>
            What are the drawbacks of cookies?
        </item>
        <item>
            What is Server Side Events in HTML5?
        </item>
        <item>
            Differences between HTML &amp; XML?
        </item>
        <item>
            How do CSS precedence/cascading rules work? How does the !important directive affect the rules?
        </item>

    </string-array>

    <string-array name="html_answers">
        <!--What are some of the key new features in HTML5?-->
        <item>
            <![CDATA[<html><pre style="text-align:center">
            <p>Key new features of HTML5 include:</p>
<p>- Improved support for embedding graphics, audio, and video content via the new&nbsp;<a href="http://www.w3schools.com/tags/tag_canvas.asp" rel="noopener noreferrer"><code>&lt;canvas&gt;</code></a>,&nbsp;<a href="http://www.w3schools.com/tags/tag_audio.asp" rel="noopener noreferrer"><code>&lt;audio&gt;</code></a>, and&nbsp;<a href="http://www.w3schools.com/tags/tag_video.asp" rel="noopener noreferrer"><code>&lt;video&gt;</code></a>&nbsp;tags.</p>
<p>- Extensions to the JavaScript API such as&nbsp;<a href="http://www.w3schools.com/html/html5_geolocation.asp" rel="noopener noreferrer">geolocation</a>&nbsp;and&nbsp;<a href="http://www.w3schools.com/html/html5_draganddrop.asp" rel="noopener noreferrer">drag-and-drop</a>&nbsp;as well for&nbsp;<a href="http://www.w3schools.com/html/html5_webstorage.asp" rel="noopener noreferrer">storage</a>&nbsp;and&nbsp;<a href="http://www.w3schools.com/html/html5_app_cache.asp" rel="noopener noreferrer">caching</a>.</p>
<p>- Introduction of&nbsp;<a href="http://www.w3schools.com/html/html5_webworkers.asp" rel="noopener noreferrer">"web workers"</a>.</p>
<p>- Several new semantic tags were also added to complement the structural logic of modern web applications. These include the&nbsp;<code>&lt;main&gt;</code>,&nbsp;<code>&lt;nav&gt;</code>,&nbsp;<code>&lt;article&gt;</code>,&nbsp;<code>&lt;section&gt;</code>,&nbsp;<code>&lt;header&gt;</code>,&nbsp;<code>&lt;footer&gt;</code>, and&nbsp;<code>&lt;aside&gt;</code>&nbsp;tags.</p>
<p>- New form controls, such as&nbsp;<code>&lt;calendar&gt;</code>,&nbsp;<code>&lt;date&gt;</code>,&nbsp;<code>&lt;time&gt;</code>,&nbsp;<code>&lt;email&gt;</code>,&nbsp;<code>&lt;url&gt;</code>, and&nbsp;<code>&lt;search&gt;</code>.</p>
            </pre></html>
            ]]>
        </item>
        <!--What are the differences between XHTML &amp;amp; HTML5?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
              <p>- XHTML is hybrid between HTML and XML, whereas HTML5 is a version of HTML.</p>
<p>- XHTML and HTML are two different ways of representing markup.</p>
<p>- XHTML is almost identical to HTML 4.01. HTML5 is the latest version of HTML.</p>
<p>- In XHTML, all tags, once opened, must be closed. HTML is less strict.</p>
<p>- XHTML has some restrictions about what tags can be nested inside each other.</p>
<p>- XHTML is stricter version of HTML; HTML5 is an upgrade of HTML.</p>
<p>- XHTML uses XML parsing requirements. HTML uses its own.</p>
<p>- HTML does not have a well-formedness constraint, no errors are fatal. In XHTML, well-formedness errors are fatal.</p>
<p>- While XHTML is case sensitive, HTML5 is not (HTML is also case insensitive).</p>
<p>- In HTML5, one does not need to manually declare the namespace.</p>
<p>- In HTML5, one does not need to add type attributes to script and style elements.</p>
<p>- In HTML5, one must use &lt;!DOCTYPE html&gt;, instead of a long doctype.</p>
<p>- In HTML5, the charset declaration is much simpler.</p>
<p>- In HTML5, one does not have a choice to include or not include a dtd uri in the doctype or a choice between transitional and strict.</p>
<p>- In HTML5, one can use embed if needed.</p>
<p>- XHTML 5 is the XML serialization of HTML 5.</p>
<p>- [HTML 5] is intended to replace XHTML 1.0 as the normative definition of the XML serialization of the HTML vocabulary.</p>
<p>- HTML5 is compatible with all browsers while XHTML isn\'t.</p>
            </pre></html>
            ]]>
        </item>
        <!--Discuss the differences between an HTML specification and a browser\'s implementation thereof.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>HTML specifications such as HTML5 define a set of rules that a document must adhere to in order to be "valid" according to that specification. In addition, a specification provides instructions on how a browser must interpret and render such a document.</p>
<p>A browser is said to "support" a specification if it handles valid documents according to the rules of the specification. As of yet, no browser supports all aspects of the HTML5 specification (although all of the major browser support&nbsp;<em>most</em>&nbsp;of it), and as a result, it is necessary for the developer to confirm whether the aspect they are making use of will be supported by all of the browsers on which they hope to display their content. This is why cross-browser support continues to be a headache for developers, despite the improved specifications.</p>
<p>In addition, while HTML5 defines some rules to follow for an invalid HTML5 document (i.e., one that contains syntactical errors), invalid documents may contain anything, and it is impossible for the specification to handle all possibilities comprehensively. Thus, many decisions about how to handle malformed documents are left up to the browser.</p>
            </pre></html>
            ]]>
        </item>
        <!--Briefly describe the correct usage of the following HTML5 semantic elements: &lt;header&gt;, &lt;article&gt;, &lt;section&gt;, &lt;footer&gt;.-->
        <item>
            <![CDATA[<html><pre style="text-align:center">
            <p>The&nbsp;<em><code>&lt;header&gt;</code></em>&nbsp;element is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author&rsquo;s name, time and date of publication, table of contents, or other navigational information.</p>
<p>The&nbsp;<em><code>&lt;article&gt;</code>&nbsp;</em>element is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it&rsquo;s meaining. Individual blog posts or news stories are good examples.</p>
<p>The&nbsp;<em><code>&lt;section&gt;</code></em>&nbsp;element is a flexible container for holding content that shares a common informational theme or purpose.</p>
<p>The&nbsp;<em><code>&lt;footer&gt;</code>&nbsp;</em>element is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author&rsquo;s name, copyright information, and related links are typical examples of such content.</p>
            </pre></html>
            ]]>
        </item>
        <!--Can a &lt;section&gt; contain &lt;article&gt; elements? Can an &lt;article&gt; contain &lt;section&gt; elements? Provide usage examples.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>The answer to both questions is yes; i.e., a&nbsp;<em><code>&lt;section&gt;</code></em>&nbsp;can contain&nbsp;<em><code>&lt;article&gt;</code></em>&nbsp;elements, and an&nbsp;<em><code>&lt;article&gt;</code></em>&nbsp;can contain&nbsp;<code>&lt;section&gt;</code>elements.</p>
<p>For example, a personal dashboard page might contain a&nbsp;<em><code>&lt;section&gt;</code></em>&nbsp;for social network interactions as well as a&nbsp;<em><code>&lt;section&gt;</code></em>&nbsp;for the latest news articles, the latter of which could contain several&nbsp;<em><code>&lt;article&gt;</code></em>&nbsp;elements.</p>
<p>Conversely, an<em>&nbsp;</em><code><em>&lt;article&gt;</em></code>&nbsp;might contain a&nbsp;<em><code>&lt;section&gt;</code></em>&nbsp;at the end for reader comments.</p>
            </pre></html>
            ]]>
        </item>
        <!--Give a simple implementation of the &lt;video&gt; tag to embed a video stored at http://www.example.com/amazing_video.mp4. Give the video a width of 640 pixels by 360 pixels. Provide the user with controls.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>Here is one simple implementation:</p>
<pre><em><code>&lt;video src="http://www.example.com/amazing_video.mp4" width="640" height="360" controls&gt;&lt;/video&gt;
</code></em></pre>
<p>Alternatively, the source file may be indicated with a separate&nbsp;<em><code>&lt;source&gt;</code>&nbsp;</em>tag inside the&nbsp;<em><code>&lt;video&gt;</code></em>&nbsp;element, as in:</p>
<p><em>&lt;video width="640" height="360" controls&gt;</em><br /><em>&lt;source src="http://www.example.com/amazing_video.mp4"&gt;</em><br /><em>&lt;/video&gt;</em></p>
            </pre></html>
            ]]>
        </item>
        <!--What is HTML5 Web Storage? Explain localStorage and sessionStorage.-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>With HTML5, web pages can store data locally within the user&rsquo;s browser.</p>
<p>Earlier, this was done with cookies. However, Web Storage is more secure and faster. The data is not included with every server request, but used ONLY when asked for.</p>
<p>The data is stored in name/value pairs, and a web page can only access data stored by itself. Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.</p>
<p>The difference between localStorage and sessionStorage involves the lifetime and scope of the storage.</p>
<p>Data stored through localStorage is permanent: it does not expire and remains stored on the user&rsquo;s computer until a web app deletes it or the user asks the browser to delete it. SessionStorage has the same lifetime as the top-level window or browser tab in which the script that stored it is running. When the window or tab is permanently closed, any data stored through sessionStorage is deleted.</p>
<p>Both forms of storage are scoped to the document origin so that documents with different origins will never share the stored objects. But sessionStorage is also scoped on a per-window basis. If a user has two browser tabs displaying documents from the same origin, those two tabs have separate sessionStorage data: the scripts running in one tab cannot read or overwrite the data written by scripts in the other tab, even if both tabs are visiting exactly the same page and are running exactly the same scripts.</p>
            </pre></html>
            ]]>
        </item>
        <!--What\'s one main result if you do not specify a doctype in an HTML page?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>New HTML5-specific tags will not be interpreted by the browser.</p>
            </pre></html>
            ]]>
        </item>
        <!--What\'s the difference between the &lt;svg&gt; and &lt;canvas&gt; elements?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>The&nbsp;<em><code>&lt;svg&gt;</code></em>&nbsp;element is a container for SVG graphics. SVG has several methods for drawing paths, boxes, circles, text, and even bitmap images.</p>
<p>SVG is a language for describing 2D graphics, but&nbsp;<em><code>&lt;canvas&gt;</code>&nbsp;</em>allows you to draw 2D graphics on the fly using JavaScript.</p>
<p>SVG is XML-based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.</p>
<p>In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.</p>
<p>Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.</p>
            </pre></html>
            ]]>
        </item>
        <!--What is a class? What is an ID?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>In CSS, a</p>
<p>&nbsp;selector is an expression which begins with a full stop (".") and followed by the name of a class. The class attribute could be a space-separated list of items, and one of those must match with the class name specified in the selector.</p>
<p>Here is an example which selects a div and modified it style.</p>
<p><em>//css</em></p>
<p><em><span class="pun">.</span><span class="pln">sampleclass </span><span class="pun">{</span><span class="pln">font</span><span class="pun">-</span><span class="pln">family</span><span class="pun">:</span> <span class="typ">Ariel</span><span class="pun">;</span><span class="pln"> font</span><span class="pun">-</span><span class="pln">size</span><span class="pun">:</span> <span class="lit">10</span><span class="pun">;</span><span class="pln"> background</span><span class="pun">:</span><span class="pln"> green</span><span class="pun">;}<br /></span></em></p>
<p>//html</p>
<p><em><span class="pun">&lt;</span><span class="pln">div </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"sampleclass"</span><span class="pun">&gt;....&lt;/</span><span class="pln">div</span><span class="pun">&gt;</span></em></p>
<p>The <strong>ID</strong> selector uses the &ldquo;ID&rdquo; attribute of the target HTML element to select it. The constraint to work is that the ID should be unique within a page so that the selector can point it out correctly.</p>
<p>To build an ID selector expression, start with a hash (#) character, followed by the id of the element.</p>
<p>Here is an example which selects a paragraph element using its ID.</p>
<p><em>//css</em></p>
<pre class="lang:css decode:true prettyprinted"><em><span class="com">#sample {padding: 10px;}</span>
<br />//html
<span class="pun">&lt;</span><span class="pln">p id</span><span class="pun">=</span><span class="str">"selector"</span><span class="pun">&gt;...&lt;/</span><span class="pln">p</span><span class="pun">&gt;</span></em></pre>
            </pre></html>
            ]]>
        </item>
        <!--What\'s the difference between a block-level element and an inline element?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>Each element in HTML is displayed in one of a few ways. By default, most tags are either displayed as block-level or inline. This value can be overridden using&nbsp;<a href="https://www.goskills.com/Course/Intro-CSS">CSS</a>.</p>
<p><strong>Block</strong></p>
<p>As the name suggests, a block-level element is drawn as a block that stretches to fill the full width available to it (the width of its container) and will always start on a new line.</p>
<p>Examples of elements that are block-level by default:<em>&nbsp;</em><em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>div<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>img<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>section<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>form<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>nav<span class="punctuation token">&gt;</span></span></code>.</em></p>
<p><strong>Inline</strong></p>
<p>Unlike the block-level elements, inline elements are drawn where they are defined and only take up space that is absolutely needed. The easiest way to understand how they work is to look at how text flows on a page. When a line of text gets to the end of the space available, it wraps onto the next line and happily keeps going. If you were to tack more text onto an existing line of text, it will stay on the same line, as if it was all part of the same text to begin with.</p>
<p>Examples of elements that are inline by default:&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>span<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>b<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>strong<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>a<span class="punctuation token">&gt;</span></span></code>,&nbsp;<code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>input<span class="punctuation token">&gt;</span></span></code>.</em></p>
<p>&nbsp;</p>
            </pre></html>
            ]]>
        </item>
        <!--How do you apply CSS styles to a web page?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>There are three main ways to apply CSS styles to a webpage:</p>
<p><strong>Inline styles</strong></p>
<p>You can add a style attribute to almost any tag. Inside this attribute you can write your CSS rules.</p>
<pre class="language-html"><em>&lt;div style="background-color: red;"&gt;A container with a red background.&lt;/div&gt;</em></pre>
<p><strong>A style block</strong></p>
<p>You are able to define one or more style blocks inside the head section of your HTML document. Inside these blocks you can write your CSS rules. You will have to specify which elements on the page you&rsquo;d like to style. In the below example, we&rsquo;re targeting the&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>body<span class="punctuation token">&gt;</span></span></code></em>&nbsp;tag and an element with a class attribute equal to&nbsp;<em><code class="language-html">.button</code>.</em></p>
<p><em>&lt;head&gt;</em><br /><em>&lt;style&gt;</em><br /><em>body {</em><br /><em>font-size: 16px;</em><br /><em>}</em></p>
<p><em>.button {</em><br /><em>padding: 10px;</em><br /><em>}</em><br /><em>&lt;/style&gt;</em><br /><em>&lt;/head&gt;</em></p>
<p><strong>Link to a CSS file</strong></p>
<p>By far the most recommended option is to link to a CSS file. This way you are able to keep the content (HTML) separate from the way you present that content (CSS). It also means you can use the same styles on multiple pages. To link to a CSS file, you will have to add a&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>link<span class="punctuation token">&gt;</span></span></code></em>&nbsp;tag to the&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>head<span class="punctuation token">&gt;</span></span></code></em>&nbsp;section in your document with an&nbsp;<em><code class="language-markup"><span class="tag token"><span class="attr-name token">href</span></span></code></em>&nbsp;attribute that specifies the location of the CSS file.</p>
<pre class="language-markup"><em>&lt;head&gt;</em><br /><em>    &lt;link rel="stylesheet" href="styles.css"&gt;</em><br /><em>&lt;/head&gt;</em></pre>
             </pre></html>
            ]]>
        </item>
        <!--How do you apply JavaScript to a web page?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
                <p>As with CSS, there are three main ways of including JavaScript:</p>
<p><strong>Inline</strong></p>
<p>Certain HTML elements allow you to execute a piece of JavaScript when a certain event occurs. For example, a button allows you to run a script when you click on it. These events are accessed through attributes and differ based on the events that are available on each element. The following example shows an alert with a message when the user clicks on it.</p>
<pre class="language-markup"><em>&lt;button onclick="alert(\'You clicked on me!\');"&gt;Click me!&lt;/button&gt;</em></pre>
<p><strong>A script block</strong></p>
<p>You can define a script block anywhere on the page, which will get executed as soon as the browser reaches that part of the document. Note that this can be inside the&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>head<span class="punctuation token">&gt;</span></span></code>&nbsp;</em>or<em>&nbsp;</em><code class="language-html"><span class="tag token"><em><span class="punctuation token">&lt;</span>body</em><span class="punctuation token"><em>&gt;</em>&nbsp;</span></span></code>section of your document.</p>
<pre class="language-markup"><em><code class="language-markup"><span class="tag token"><span class="punctuation token">&lt;script&gt;<br />var x = 5;<br />var y = 6;<br />var result = x + y;<br />alert("X + Y is equal to " + result);<br />&lt;/script&gt;</span></span></code></em></pre>
<p><strong>Link to a JavaScript file</strong></p>
<p>Again, as with CSS, this is the preferred way of including JavaScript. It allows you to keep the content of the page separate to how users interact with that content, and it allows you to load the same script on multiple pages. As with the script block, you can load a JavaScript file from the&nbsp;<code class="language-html"><span class="tag token"><em><span class="punctuation token">&lt;</span>head</em><span class="punctuation token"><em>&gt;</em></span></span></code>&nbsp;or&nbsp;<em><code class="language-html"><span class="tag token"><span class="punctuation token">&lt;</span>body<span class="punctuation token">&gt;</span></span></code></em>, but keep in mind it will be loaded in the order you\'ve structured your document.</p>
<pre class="language-markup"><em><code class="language-markup"><span class="tag token"><span class="punctuation token">&lt;</span>script <span class="attr-name token">src</span><span class="attr-value token"><span class="punctuation token">=</span><span class="punctuation token">"</span>my-code.js<span class="punctuation token">"</span></span><span class="punctuation token">&gt;</span></span><span class="tag token"><span class="punctuation token">&lt;/</span>script<span class="punctuation token">&gt;</span></span></code></em></pre>
             </pre></html>
            ]]>
        </item>
        <!--What is Web Forms 2.0?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
             <p>Web Forms 2.0 is an extension to the forms features found in HTML4. Form elements and attributes in HTML5 provide a greater degree of semantic mark-up than HTML4 and remove a great deal of the need for tedious scripting and styling that was required in HTML4.</p>
            </pre></html>
            ]]>
        </item>
        <!--What are the drawbacks of cookies?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>Cookies have following drawbacks;</p>
<p>- Cookies are included with every HTTP request, thereby slowing down your web application by transmitting the same data.</p>
<p>- Cookies are included with every HTTP request, thereby sending data unencrypted over the internet.</p>
<p>- Cookies are limited to about 4 KB of data . Not enough to store required data.</p>
            </pre></html>
            ]]>
        </item>
        <!--What is Server Side Events in HTML5?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>Along with HTML5, WHATWG Web Applications 1.0 introduces events which flow from web server to the web browsers and they are called Server-Sent Events (SSE). Using SSE you can push DOM events continously from your web server to the visitor\'s browser.</p>
<p>The event streaming approach opens a persistent connection to the server, sending data to the client when new information is available, eliminating the need for continuous polling.</p>
<p>Server-sent events standardizes how we stream data from the server to the client.</p>
            </pre></html>
            ]]>
        </item>
        <!--Differences between HTML &amp; XML?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p><strong>XML (Extensible Markup Language)</strong>&nbsp;is a language that enables a user to define a representation of data or data structure where values are assigned in each field in the structure. In XML to create a language or elements, one must follow some set of rules defined in the XML. The XML document includes data as strings and text which is surrounded by text markup. The fundamental unit in the XML is known as an&nbsp;<strong>element</strong>.</p>
<p>On the other hand, <strong>HTML (Hypertext Markup Language)</strong>&nbsp;is the markup language for constructing web pages. The markup commands employed in the web-based content signifies structure of the document and its layout to the browser. Browsers simply read the document with the HTML markup in it and render it on the screen through examining the placed HTML elements in the document.</p>
<p><b>Key Differences Between XML and HTML</b></p>
<p>- XML is a text-based markup language which has the self-describing structure and can effectively define another markup language. On the other hand, HTML is a predefined markup language and has a limited capability.</p>
<p>- XML provides logical structuring of the document while HTML structure is predefined where "head" and "body" tags are used.</p>
<p>- When it comes to language type HTML is case insensitive. As against, XML is case sensitive.</p>
<p>- HTML was designed with the emphasis on the presentational features of the data. In contrast, XML is data specific where the data storage and transfer was the prior concern.</p>
<p>- XML does not permit any mistake if there are some errors in the code it could not be parsed. Inversely, in HTML small errors can be neglected.</p>
<p>- Whitespaces in XML are used for a specific use as XML considers every single character. On the contrary, HTML can ignore the whitespaces.</p>
<p>- The tags in XML are mandatory to be closed, whereas in HTML an open tag can also work completely fine.</p>
<p>- Nesting in XML should be done correctly, it has a big importance in XML syntax. Conversely, HTML does not care much about nesting.</p>
            </pre></html>
            ]]>
        </item>
        <!--How do CSS precedence/cascading rules work? How does the !important directive affect the rules?-->
        <item>
             <![CDATA[<html><pre style="text-align:center">
            <p>CSS style rules "<em>cascade</em>" in the sense that they follow an order of precedence. Global style rules apply first to HTML elements, and local style rules override them. For example, a style defined in a style element in a webpage overrides a style defined in an external style sheet. Similarly, an inline style that is defined in an HTML element in the page overrides any styles that are defined for that same element elsewhere. The !important rule is a way to make your CSS cascade but also have the rules you feel are most crucial always be applied. A rule that has the !important property will always be applied no matter where that rule appears in the CSS document. So if you wanted to make sure that a property always applied, you would add the !important property to the tag. So, like the example below, you would write:</p>
            <p><em>p { </em><br /><em>color: #ff0000 !important; }</em><br /><em>p {</em><br /><em>color: #000000; }</em></p>
            </pre></html>
            ]]>
        </item>
    </string-array>
</resources>